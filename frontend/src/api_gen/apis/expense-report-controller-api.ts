/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ExpenseReport } from '../models';
// @ts-ignore
import type { ExpenseReportInfoDTO } from '../models';
// @ts-ignore
import type { ExpenseReportItemWithSubcategoryDTO } from '../models';
/**
 * ExpenseReportControllerApi - axios parameter creator
 * @export
 */
export const ExpenseReportControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} tripId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExpenseReport: async (tripId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tripId' is not null or undefined
            assertParamExists('createExpenseReport', 'tripId', tripId)
            const localVarPath = `/api/expense-reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tripId !== undefined) {
                localVarQueryParameter['tripId'] = tripId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExpenseReport: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteExpenseReport', 'id', id)
            const localVarPath = `/api/expense-reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpenseReportInfo: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getExpenseReportInfo', 'id', id)
            const localVarPath = `/api/expense-reports/{id}/info`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpenseReportItems: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getExpenseReportItems', 'id', id)
            const localVarPath = `/api/expense-reports/{id}/items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExpenseReportControllerApi - functional programming interface
 * @export
 */
export const ExpenseReportControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExpenseReportControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} tripId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExpenseReport(tripId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseReport>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExpenseReport(tripId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpenseReportControllerApi.createExpenseReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExpenseReport(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExpenseReport(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpenseReportControllerApi.deleteExpenseReport']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExpenseReportInfo(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseReportInfoDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExpenseReportInfo(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpenseReportControllerApi.getExpenseReportInfo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExpenseReportItems(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExpenseReportItemWithSubcategoryDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExpenseReportItems(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpenseReportControllerApi.getExpenseReportItems']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExpenseReportControllerApi - factory interface
 * @export
 */
export const ExpenseReportControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExpenseReportControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ExpenseReportControllerApiCreateExpenseReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExpenseReport(requestParameters: ExpenseReportControllerApiCreateExpenseReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExpenseReport> {
            return localVarFp.createExpenseReport(requestParameters.tripId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ExpenseReportControllerApiDeleteExpenseReportRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExpenseReport(requestParameters: ExpenseReportControllerApiDeleteExpenseReportRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteExpenseReport(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ExpenseReportControllerApiGetExpenseReportInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpenseReportInfo(requestParameters: ExpenseReportControllerApiGetExpenseReportInfoRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExpenseReportInfoDTO> {
            return localVarFp.getExpenseReportInfo(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ExpenseReportControllerApiGetExpenseReportItemsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpenseReportItems(requestParameters: ExpenseReportControllerApiGetExpenseReportItemsRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ExpenseReportItemWithSubcategoryDTO>> {
            return localVarFp.getExpenseReportItems(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createExpenseReport operation in ExpenseReportControllerApi.
 * @export
 * @interface ExpenseReportControllerApiCreateExpenseReportRequest
 */
export interface ExpenseReportControllerApiCreateExpenseReportRequest {
    /**
     * 
     * @type {number}
     * @memberof ExpenseReportControllerApiCreateExpenseReport
     */
    readonly tripId: number
}

/**
 * Request parameters for deleteExpenseReport operation in ExpenseReportControllerApi.
 * @export
 * @interface ExpenseReportControllerApiDeleteExpenseReportRequest
 */
export interface ExpenseReportControllerApiDeleteExpenseReportRequest {
    /**
     * 
     * @type {number}
     * @memberof ExpenseReportControllerApiDeleteExpenseReport
     */
    readonly id: number
}

/**
 * Request parameters for getExpenseReportInfo operation in ExpenseReportControllerApi.
 * @export
 * @interface ExpenseReportControllerApiGetExpenseReportInfoRequest
 */
export interface ExpenseReportControllerApiGetExpenseReportInfoRequest {
    /**
     * 
     * @type {number}
     * @memberof ExpenseReportControllerApiGetExpenseReportInfo
     */
    readonly id: number
}

/**
 * Request parameters for getExpenseReportItems operation in ExpenseReportControllerApi.
 * @export
 * @interface ExpenseReportControllerApiGetExpenseReportItemsRequest
 */
export interface ExpenseReportControllerApiGetExpenseReportItemsRequest {
    /**
     * 
     * @type {number}
     * @memberof ExpenseReportControllerApiGetExpenseReportItems
     */
    readonly id: number
}

/**
 * ExpenseReportControllerApi - object-oriented interface
 * @export
 * @class ExpenseReportControllerApi
 * @extends {BaseAPI}
 */
export class ExpenseReportControllerApi extends BaseAPI {
    /**
     * 
     * @param {ExpenseReportControllerApiCreateExpenseReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseReportControllerApi
     */
    public createExpenseReport(requestParameters: ExpenseReportControllerApiCreateExpenseReportRequest, options?: RawAxiosRequestConfig) {
        return ExpenseReportControllerApiFp(this.configuration).createExpenseReport(requestParameters.tripId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExpenseReportControllerApiDeleteExpenseReportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseReportControllerApi
     */
    public deleteExpenseReport(requestParameters: ExpenseReportControllerApiDeleteExpenseReportRequest, options?: RawAxiosRequestConfig) {
        return ExpenseReportControllerApiFp(this.configuration).deleteExpenseReport(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExpenseReportControllerApiGetExpenseReportInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseReportControllerApi
     */
    public getExpenseReportInfo(requestParameters: ExpenseReportControllerApiGetExpenseReportInfoRequest, options?: RawAxiosRequestConfig) {
        return ExpenseReportControllerApiFp(this.configuration).getExpenseReportInfo(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExpenseReportControllerApiGetExpenseReportItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseReportControllerApi
     */
    public getExpenseReportItems(requestParameters: ExpenseReportControllerApiGetExpenseReportItemsRequest, options?: RawAxiosRequestConfig) {
        return ExpenseReportControllerApiFp(this.configuration).getExpenseReportItems(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

