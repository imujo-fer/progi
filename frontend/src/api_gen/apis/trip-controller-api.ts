/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { PageTripResponseDTO } from '../models';
// @ts-ignore
import type { Trip } from '../models';
// @ts-ignore
import type { TripDTO } from '../models';
// @ts-ignore
import type { TripResponseDTO } from '../models';
// @ts-ignore
import type { TripStatus } from '../models';
// @ts-ignore
import type { TripWithCountryDTO } from '../models';
/**
 * TripControllerApi - axios parameter creator
 * @export
 */
export const TripControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TripDTO} tripDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrip: async (tripDTO: TripDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tripDTO' is not null or undefined
            assertParamExists('createTrip', 'tripDTO', tripDTO)
            const localVarPath = `/api/trips`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tripDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrip: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTrip', 'id', id)
            const localVarPath = `/api/trips/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartmentApprovalTrips: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/trips/department-head`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirectorApprovalTrips: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/trips/director`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetEmployeeTripsByStatusStatusEnum} [status] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeTripsByStatus: async (status?: GetEmployeeTripsByStatusStatusEnum, page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/trips/employee`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpenseApprovalTrips: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/trips/accountant-expense`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentApprovalTrips: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/trips/accountant-payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTripById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTripById', 'id', id)
            const localVarPath = `/api/trips/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTripStatus: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTripStatus', 'id', id)
            const localVarPath = `/api/trips/{id}/status`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tmpGetAllTrips: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/trips/tmp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TripDTO} tripDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTrip: async (id: number, tripDTO: TripDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTrip', 'id', id)
            // verify required parameter 'tripDTO' is not null or undefined
            assertParamExists('updateTrip', 'tripDTO', tripDTO)
            const localVarPath = `/api/trips/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tripDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TripControllerApi - functional programming interface
 * @export
 */
export const TripControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TripControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {TripDTO} tripDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTrip(tripDTO: TripDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Trip>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTrip(tripDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripControllerApi.createTrip']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTrip(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrip(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripControllerApi.deleteTrip']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDepartmentApprovalTrips(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageTripResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDepartmentApprovalTrips(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripControllerApi.getDepartmentApprovalTrips']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDirectorApprovalTrips(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageTripResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDirectorApprovalTrips(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripControllerApi.getDirectorApprovalTrips']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetEmployeeTripsByStatusStatusEnum} [status] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeeTripsByStatus(status?: GetEmployeeTripsByStatusStatusEnum, page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageTripResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeeTripsByStatus(status, page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripControllerApi.getEmployeeTripsByStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getExpenseApprovalTrips(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageTripResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getExpenseApprovalTrips(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripControllerApi.getExpenseApprovalTrips']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentApprovalTrips(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageTripResponseDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentApprovalTrips(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripControllerApi.getPaymentApprovalTrips']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTripById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripWithCountryDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTripById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripControllerApi.getTripById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTripStatus(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTripStatus(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripControllerApi.getTripStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tmpGetAllTrips(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TripResponseDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tmpGetAllTrips(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripControllerApi.tmpGetAllTrips']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {TripDTO} tripDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTrip(id: number, tripDTO: TripDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Trip>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTrip(id, tripDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripControllerApi.updateTrip']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TripControllerApi - factory interface
 * @export
 */
export const TripControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TripControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {TripControllerApiCreateTripRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrip(requestParameters: TripControllerApiCreateTripRequest, options?: RawAxiosRequestConfig): AxiosPromise<Trip> {
            return localVarFp.createTrip(requestParameters.tripDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TripControllerApiDeleteTripRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrip(requestParameters: TripControllerApiDeleteTripRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteTrip(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TripControllerApiGetDepartmentApprovalTripsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartmentApprovalTrips(requestParameters: TripControllerApiGetDepartmentApprovalTripsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageTripResponseDTO> {
            return localVarFp.getDepartmentApprovalTrips(requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TripControllerApiGetDirectorApprovalTripsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDirectorApprovalTrips(requestParameters: TripControllerApiGetDirectorApprovalTripsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageTripResponseDTO> {
            return localVarFp.getDirectorApprovalTrips(requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TripControllerApiGetEmployeeTripsByStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeeTripsByStatus(requestParameters: TripControllerApiGetEmployeeTripsByStatusRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageTripResponseDTO> {
            return localVarFp.getEmployeeTripsByStatus(requestParameters.status, requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TripControllerApiGetExpenseApprovalTripsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getExpenseApprovalTrips(requestParameters: TripControllerApiGetExpenseApprovalTripsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageTripResponseDTO> {
            return localVarFp.getExpenseApprovalTrips(requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TripControllerApiGetPaymentApprovalTripsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentApprovalTrips(requestParameters: TripControllerApiGetPaymentApprovalTripsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageTripResponseDTO> {
            return localVarFp.getPaymentApprovalTrips(requestParameters.page, requestParameters.size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TripControllerApiGetTripByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTripById(requestParameters: TripControllerApiGetTripByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<TripWithCountryDTO> {
            return localVarFp.getTripById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TripControllerApiGetTripStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTripStatus(requestParameters: TripControllerApiGetTripStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<TripStatus> {
            return localVarFp.getTripStatus(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tmpGetAllTrips(options?: RawAxiosRequestConfig): AxiosPromise<Array<TripResponseDTO>> {
            return localVarFp.tmpGetAllTrips(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TripControllerApiUpdateTripRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTrip(requestParameters: TripControllerApiUpdateTripRequest, options?: RawAxiosRequestConfig): AxiosPromise<Trip> {
            return localVarFp.updateTrip(requestParameters.id, requestParameters.tripDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTrip operation in TripControllerApi.
 * @export
 * @interface TripControllerApiCreateTripRequest
 */
export interface TripControllerApiCreateTripRequest {
    /**
     * 
     * @type {TripDTO}
     * @memberof TripControllerApiCreateTrip
     */
    readonly tripDTO: TripDTO
}

/**
 * Request parameters for deleteTrip operation in TripControllerApi.
 * @export
 * @interface TripControllerApiDeleteTripRequest
 */
export interface TripControllerApiDeleteTripRequest {
    /**
     * 
     * @type {number}
     * @memberof TripControllerApiDeleteTrip
     */
    readonly id: number
}

/**
 * Request parameters for getDepartmentApprovalTrips operation in TripControllerApi.
 * @export
 * @interface TripControllerApiGetDepartmentApprovalTripsRequest
 */
export interface TripControllerApiGetDepartmentApprovalTripsRequest {
    /**
     * 
     * @type {number}
     * @memberof TripControllerApiGetDepartmentApprovalTrips
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TripControllerApiGetDepartmentApprovalTrips
     */
    readonly size?: number
}

/**
 * Request parameters for getDirectorApprovalTrips operation in TripControllerApi.
 * @export
 * @interface TripControllerApiGetDirectorApprovalTripsRequest
 */
export interface TripControllerApiGetDirectorApprovalTripsRequest {
    /**
     * 
     * @type {number}
     * @memberof TripControllerApiGetDirectorApprovalTrips
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TripControllerApiGetDirectorApprovalTrips
     */
    readonly size?: number
}

/**
 * Request parameters for getEmployeeTripsByStatus operation in TripControllerApi.
 * @export
 * @interface TripControllerApiGetEmployeeTripsByStatusRequest
 */
export interface TripControllerApiGetEmployeeTripsByStatusRequest {
    /**
     * 
     * @type {'PENDING_DEPARTMENT_APPROVAL' | 'DEPARTMENT_APPROVAL_REJECTED' | 'TRAVEL_APPROVED' | 'PENDING_EXPENSE_APPROVAL' | 'EXPENSE_APPROVAL_REJECTED' | 'PENDING_DIRECTOR_APPROVAL' | 'DIRECTOR_APPROVAL_REJECTED' | 'AWAITING_PAYMENT' | 'PAID'}
     * @memberof TripControllerApiGetEmployeeTripsByStatus
     */
    readonly status?: GetEmployeeTripsByStatusStatusEnum

    /**
     * 
     * @type {number}
     * @memberof TripControllerApiGetEmployeeTripsByStatus
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TripControllerApiGetEmployeeTripsByStatus
     */
    readonly size?: number
}

/**
 * Request parameters for getExpenseApprovalTrips operation in TripControllerApi.
 * @export
 * @interface TripControllerApiGetExpenseApprovalTripsRequest
 */
export interface TripControllerApiGetExpenseApprovalTripsRequest {
    /**
     * 
     * @type {number}
     * @memberof TripControllerApiGetExpenseApprovalTrips
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TripControllerApiGetExpenseApprovalTrips
     */
    readonly size?: number
}

/**
 * Request parameters for getPaymentApprovalTrips operation in TripControllerApi.
 * @export
 * @interface TripControllerApiGetPaymentApprovalTripsRequest
 */
export interface TripControllerApiGetPaymentApprovalTripsRequest {
    /**
     * 
     * @type {number}
     * @memberof TripControllerApiGetPaymentApprovalTrips
     */
    readonly page?: number

    /**
     * 
     * @type {number}
     * @memberof TripControllerApiGetPaymentApprovalTrips
     */
    readonly size?: number
}

/**
 * Request parameters for getTripById operation in TripControllerApi.
 * @export
 * @interface TripControllerApiGetTripByIdRequest
 */
export interface TripControllerApiGetTripByIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TripControllerApiGetTripById
     */
    readonly id: number
}

/**
 * Request parameters for getTripStatus operation in TripControllerApi.
 * @export
 * @interface TripControllerApiGetTripStatusRequest
 */
export interface TripControllerApiGetTripStatusRequest {
    /**
     * 
     * @type {number}
     * @memberof TripControllerApiGetTripStatus
     */
    readonly id: number
}

/**
 * Request parameters for updateTrip operation in TripControllerApi.
 * @export
 * @interface TripControllerApiUpdateTripRequest
 */
export interface TripControllerApiUpdateTripRequest {
    /**
     * 
     * @type {number}
     * @memberof TripControllerApiUpdateTrip
     */
    readonly id: number

    /**
     * 
     * @type {TripDTO}
     * @memberof TripControllerApiUpdateTrip
     */
    readonly tripDTO: TripDTO
}

/**
 * TripControllerApi - object-oriented interface
 * @export
 * @class TripControllerApi
 * @extends {BaseAPI}
 */
export class TripControllerApi extends BaseAPI {
    /**
     * 
     * @param {TripControllerApiCreateTripRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripControllerApi
     */
    public createTrip(requestParameters: TripControllerApiCreateTripRequest, options?: RawAxiosRequestConfig) {
        return TripControllerApiFp(this.configuration).createTrip(requestParameters.tripDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TripControllerApiDeleteTripRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripControllerApi
     */
    public deleteTrip(requestParameters: TripControllerApiDeleteTripRequest, options?: RawAxiosRequestConfig) {
        return TripControllerApiFp(this.configuration).deleteTrip(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TripControllerApiGetDepartmentApprovalTripsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripControllerApi
     */
    public getDepartmentApprovalTrips(requestParameters: TripControllerApiGetDepartmentApprovalTripsRequest = {}, options?: RawAxiosRequestConfig) {
        return TripControllerApiFp(this.configuration).getDepartmentApprovalTrips(requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TripControllerApiGetDirectorApprovalTripsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripControllerApi
     */
    public getDirectorApprovalTrips(requestParameters: TripControllerApiGetDirectorApprovalTripsRequest = {}, options?: RawAxiosRequestConfig) {
        return TripControllerApiFp(this.configuration).getDirectorApprovalTrips(requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TripControllerApiGetEmployeeTripsByStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripControllerApi
     */
    public getEmployeeTripsByStatus(requestParameters: TripControllerApiGetEmployeeTripsByStatusRequest = {}, options?: RawAxiosRequestConfig) {
        return TripControllerApiFp(this.configuration).getEmployeeTripsByStatus(requestParameters.status, requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TripControllerApiGetExpenseApprovalTripsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripControllerApi
     */
    public getExpenseApprovalTrips(requestParameters: TripControllerApiGetExpenseApprovalTripsRequest = {}, options?: RawAxiosRequestConfig) {
        return TripControllerApiFp(this.configuration).getExpenseApprovalTrips(requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TripControllerApiGetPaymentApprovalTripsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripControllerApi
     */
    public getPaymentApprovalTrips(requestParameters: TripControllerApiGetPaymentApprovalTripsRequest = {}, options?: RawAxiosRequestConfig) {
        return TripControllerApiFp(this.configuration).getPaymentApprovalTrips(requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TripControllerApiGetTripByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripControllerApi
     */
    public getTripById(requestParameters: TripControllerApiGetTripByIdRequest, options?: RawAxiosRequestConfig) {
        return TripControllerApiFp(this.configuration).getTripById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TripControllerApiGetTripStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripControllerApi
     */
    public getTripStatus(requestParameters: TripControllerApiGetTripStatusRequest, options?: RawAxiosRequestConfig) {
        return TripControllerApiFp(this.configuration).getTripStatus(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripControllerApi
     */
    public tmpGetAllTrips(options?: RawAxiosRequestConfig) {
        return TripControllerApiFp(this.configuration).tmpGetAllTrips(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TripControllerApiUpdateTripRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripControllerApi
     */
    public updateTrip(requestParameters: TripControllerApiUpdateTripRequest, options?: RawAxiosRequestConfig) {
        return TripControllerApiFp(this.configuration).updateTrip(requestParameters.id, requestParameters.tripDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const GetEmployeeTripsByStatusStatusEnum = {
    PendingDepartmentApproval: 'PENDING_DEPARTMENT_APPROVAL',
    DepartmentApprovalRejected: 'DEPARTMENT_APPROVAL_REJECTED',
    TravelApproved: 'TRAVEL_APPROVED',
    PendingExpenseApproval: 'PENDING_EXPENSE_APPROVAL',
    ExpenseApprovalRejected: 'EXPENSE_APPROVAL_REJECTED',
    PendingDirectorApproval: 'PENDING_DIRECTOR_APPROVAL',
    DirectorApprovalRejected: 'DIRECTOR_APPROVAL_REJECTED',
    AwaitingPayment: 'AWAITING_PAYMENT',
    Paid: 'PAID'
} as const;
export type GetEmployeeTripsByStatusStatusEnum = typeof GetEmployeeTripsByStatusStatusEnum[keyof typeof GetEmployeeTripsByStatusStatusEnum];
