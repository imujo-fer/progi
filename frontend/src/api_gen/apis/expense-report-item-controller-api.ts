/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ExpenseReportItem } from '../models';
// @ts-ignore
import type { ExpenseReportItemDTO } from '../models';
/**
 * ExpenseReportItemControllerApi - axios parameter creator
 * @export
 */
export const ExpenseReportItemControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ExpenseReportItemDTO} expenseReportItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExpenseReportItem: async (expenseReportItemDTO: ExpenseReportItemDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'expenseReportItemDTO' is not null or undefined
            assertParamExists('createExpenseReportItem', 'expenseReportItemDTO', expenseReportItemDTO)
            const localVarPath = `/api/expense-report-items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(expenseReportItemDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExpenseReportItem: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteExpenseReportItem', 'id', id)
            const localVarPath = `/api/expense-report-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {ExpenseReportItemDTO} expenseReportItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExpenseReportItem: async (id: number, expenseReportItemDTO: ExpenseReportItemDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateExpenseReportItem', 'id', id)
            // verify required parameter 'expenseReportItemDTO' is not null or undefined
            assertParamExists('updateExpenseReportItem', 'expenseReportItemDTO', expenseReportItemDTO)
            const localVarPath = `/api/expense-report-items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(expenseReportItemDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExpenseReportItemControllerApi - functional programming interface
 * @export
 */
export const ExpenseReportItemControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExpenseReportItemControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ExpenseReportItemDTO} expenseReportItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createExpenseReportItem(expenseReportItemDTO: ExpenseReportItemDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseReportItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createExpenseReportItem(expenseReportItemDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpenseReportItemControllerApi.createExpenseReportItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteExpenseReportItem(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteExpenseReportItem(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpenseReportItemControllerApi.deleteExpenseReportItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {ExpenseReportItemDTO} expenseReportItemDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExpenseReportItem(id: number, expenseReportItemDTO: ExpenseReportItemDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExpenseReportItem>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExpenseReportItem(id, expenseReportItemDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExpenseReportItemControllerApi.updateExpenseReportItem']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExpenseReportItemControllerApi - factory interface
 * @export
 */
export const ExpenseReportItemControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExpenseReportItemControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ExpenseReportItemControllerApiCreateExpenseReportItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createExpenseReportItem(requestParameters: ExpenseReportItemControllerApiCreateExpenseReportItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExpenseReportItem> {
            return localVarFp.createExpenseReportItem(requestParameters.expenseReportItemDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ExpenseReportItemControllerApiDeleteExpenseReportItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteExpenseReportItem(requestParameters: ExpenseReportItemControllerApiDeleteExpenseReportItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteExpenseReportItem(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ExpenseReportItemControllerApiUpdateExpenseReportItemRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExpenseReportItem(requestParameters: ExpenseReportItemControllerApiUpdateExpenseReportItemRequest, options?: RawAxiosRequestConfig): AxiosPromise<ExpenseReportItem> {
            return localVarFp.updateExpenseReportItem(requestParameters.id, requestParameters.expenseReportItemDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createExpenseReportItem operation in ExpenseReportItemControllerApi.
 * @export
 * @interface ExpenseReportItemControllerApiCreateExpenseReportItemRequest
 */
export interface ExpenseReportItemControllerApiCreateExpenseReportItemRequest {
    /**
     * 
     * @type {ExpenseReportItemDTO}
     * @memberof ExpenseReportItemControllerApiCreateExpenseReportItem
     */
    readonly expenseReportItemDTO: ExpenseReportItemDTO
}

/**
 * Request parameters for deleteExpenseReportItem operation in ExpenseReportItemControllerApi.
 * @export
 * @interface ExpenseReportItemControllerApiDeleteExpenseReportItemRequest
 */
export interface ExpenseReportItemControllerApiDeleteExpenseReportItemRequest {
    /**
     * 
     * @type {number}
     * @memberof ExpenseReportItemControllerApiDeleteExpenseReportItem
     */
    readonly id: number
}

/**
 * Request parameters for updateExpenseReportItem operation in ExpenseReportItemControllerApi.
 * @export
 * @interface ExpenseReportItemControllerApiUpdateExpenseReportItemRequest
 */
export interface ExpenseReportItemControllerApiUpdateExpenseReportItemRequest {
    /**
     * 
     * @type {number}
     * @memberof ExpenseReportItemControllerApiUpdateExpenseReportItem
     */
    readonly id: number

    /**
     * 
     * @type {ExpenseReportItemDTO}
     * @memberof ExpenseReportItemControllerApiUpdateExpenseReportItem
     */
    readonly expenseReportItemDTO: ExpenseReportItemDTO
}

/**
 * ExpenseReportItemControllerApi - object-oriented interface
 * @export
 * @class ExpenseReportItemControllerApi
 * @extends {BaseAPI}
 */
export class ExpenseReportItemControllerApi extends BaseAPI {
    /**
     * 
     * @param {ExpenseReportItemControllerApiCreateExpenseReportItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseReportItemControllerApi
     */
    public createExpenseReportItem(requestParameters: ExpenseReportItemControllerApiCreateExpenseReportItemRequest, options?: RawAxiosRequestConfig) {
        return ExpenseReportItemControllerApiFp(this.configuration).createExpenseReportItem(requestParameters.expenseReportItemDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExpenseReportItemControllerApiDeleteExpenseReportItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseReportItemControllerApi
     */
    public deleteExpenseReportItem(requestParameters: ExpenseReportItemControllerApiDeleteExpenseReportItemRequest, options?: RawAxiosRequestConfig) {
        return ExpenseReportItemControllerApiFp(this.configuration).deleteExpenseReportItem(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {ExpenseReportItemControllerApiUpdateExpenseReportItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseReportItemControllerApi
     */
    public updateExpenseReportItem(requestParameters: ExpenseReportItemControllerApiUpdateExpenseReportItemRequest, options?: RawAxiosRequestConfig) {
        return ExpenseReportItemControllerApiFp(this.configuration).updateExpenseReportItem(requestParameters.id, requestParameters.expenseReportItemDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

