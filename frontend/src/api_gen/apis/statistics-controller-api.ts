/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CostStatisticsDTO } from '../models';
// @ts-ignore
import type { NumberOfTripsStatisticsDTO } from '../models';
// @ts-ignore
import type { UserStatisticsDTO } from '../models';
/**
 * StatisticsControllerApi - axios parameter creator
 * @export
 */
export const StatisticsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostStatisticsByYear: async (year: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getCostStatisticsByYear', 'year', year)
            const localVarPath = `/api/statistics/cost/{year}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumberOfTripsStatisticsByYear: async (year: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getNumberOfTripsStatisticsByYear', 'year', year)
            const localVarPath = `/api/statistics/trips/{year}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [dateFrom] 
         * @param {string} [dateTo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStatistics: async (dateFrom?: string, dateTo?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/statistics/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dateFrom !== undefined) {
                localVarQueryParameter['dateFrom'] = dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['dateTo'] = dateTo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatisticsControllerApi - functional programming interface
 * @export
 */
export const StatisticsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatisticsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCostStatisticsByYear(year: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CostStatisticsDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCostStatisticsByYear(year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatisticsControllerApi.getCostStatisticsByYear']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} year 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNumberOfTripsStatisticsByYear(year: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NumberOfTripsStatisticsDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNumberOfTripsStatisticsByYear(year, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatisticsControllerApi.getNumberOfTripsStatisticsByYear']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [dateFrom] 
         * @param {string} [dateTo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserStatistics(dateFrom?: string, dateTo?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserStatisticsDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserStatistics(dateFrom, dateTo, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['StatisticsControllerApi.getUserStatistics']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * StatisticsControllerApi - factory interface
 * @export
 */
export const StatisticsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatisticsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {StatisticsControllerApiGetCostStatisticsByYearRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCostStatisticsByYear(requestParameters: StatisticsControllerApiGetCostStatisticsByYearRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<CostStatisticsDTO>> {
            return localVarFp.getCostStatisticsByYear(requestParameters.year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StatisticsControllerApiGetNumberOfTripsStatisticsByYearRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNumberOfTripsStatisticsByYear(requestParameters: StatisticsControllerApiGetNumberOfTripsStatisticsByYearRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<NumberOfTripsStatisticsDTO>> {
            return localVarFp.getNumberOfTripsStatisticsByYear(requestParameters.year, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {StatisticsControllerApiGetUserStatisticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserStatistics(requestParameters: StatisticsControllerApiGetUserStatisticsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserStatisticsDTO>> {
            return localVarFp.getUserStatistics(requestParameters.dateFrom, requestParameters.dateTo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCostStatisticsByYear operation in StatisticsControllerApi.
 * @export
 * @interface StatisticsControllerApiGetCostStatisticsByYearRequest
 */
export interface StatisticsControllerApiGetCostStatisticsByYearRequest {
    /**
     * 
     * @type {number}
     * @memberof StatisticsControllerApiGetCostStatisticsByYear
     */
    readonly year: number
}

/**
 * Request parameters for getNumberOfTripsStatisticsByYear operation in StatisticsControllerApi.
 * @export
 * @interface StatisticsControllerApiGetNumberOfTripsStatisticsByYearRequest
 */
export interface StatisticsControllerApiGetNumberOfTripsStatisticsByYearRequest {
    /**
     * 
     * @type {number}
     * @memberof StatisticsControllerApiGetNumberOfTripsStatisticsByYear
     */
    readonly year: number
}

/**
 * Request parameters for getUserStatistics operation in StatisticsControllerApi.
 * @export
 * @interface StatisticsControllerApiGetUserStatisticsRequest
 */
export interface StatisticsControllerApiGetUserStatisticsRequest {
    /**
     * 
     * @type {string}
     * @memberof StatisticsControllerApiGetUserStatistics
     */
    readonly dateFrom?: string

    /**
     * 
     * @type {string}
     * @memberof StatisticsControllerApiGetUserStatistics
     */
    readonly dateTo?: string
}

/**
 * StatisticsControllerApi - object-oriented interface
 * @export
 * @class StatisticsControllerApi
 * @extends {BaseAPI}
 */
export class StatisticsControllerApi extends BaseAPI {
    /**
     * 
     * @param {StatisticsControllerApiGetCostStatisticsByYearRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsControllerApi
     */
    public getCostStatisticsByYear(requestParameters: StatisticsControllerApiGetCostStatisticsByYearRequest, options?: RawAxiosRequestConfig) {
        return StatisticsControllerApiFp(this.configuration).getCostStatisticsByYear(requestParameters.year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StatisticsControllerApiGetNumberOfTripsStatisticsByYearRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsControllerApi
     */
    public getNumberOfTripsStatisticsByYear(requestParameters: StatisticsControllerApiGetNumberOfTripsStatisticsByYearRequest, options?: RawAxiosRequestConfig) {
        return StatisticsControllerApiFp(this.configuration).getNumberOfTripsStatisticsByYear(requestParameters.year, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {StatisticsControllerApiGetUserStatisticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticsControllerApi
     */
    public getUserStatistics(requestParameters: StatisticsControllerApiGetUserStatisticsRequest = {}, options?: RawAxiosRequestConfig) {
        return StatisticsControllerApiFp(this.configuration).getUserStatistics(requestParameters.dateFrom, requestParameters.dateTo, options).then((request) => request(this.axios, this.basePath));
    }
}

