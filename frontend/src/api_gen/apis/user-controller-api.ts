/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { UserDetailsDTO } from '../models';
// @ts-ignore
import type { UserEditDTO } from '../models';
// @ts-ignore
import type { UserInviteDTO } from '../models';
// @ts-ignore
import type { UserInviteDetailsDTO } from '../models';
/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetails: async (userId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserDetails', 'userId', userId)
            const localVarPath = `/api/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} registrationHash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetailsByRegistrationHash: async (registrationHash: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registrationHash' is not null or undefined
            assertParamExists('getUserDetailsByRegistrationHash', 'registrationHash', registrationHash)
            const localVarPath = `/api/users/register-info/{registrationHash}`
                .replace(`{${"registrationHash"}}`, encodeURIComponent(String(registrationHash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserInviteDTO} userInviteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUser: async (userInviteDTO: UserInviteDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userInviteDTO' is not null or undefined
            assertParamExists('inviteUser', 'userInviteDTO', userInviteDTO)
            const localVarPath = `/api/users/invite`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userInviteDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {UserEditDTO} userEditDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (userId: number, userEditDTO: UserEditDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUser', 'userId', userId)
            // verify required parameter 'userEditDTO' is not null or undefined
            assertParamExists('updateUser', 'userEditDTO', userEditDTO)
            const localVarPath = `/api/users/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userEditDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetailsDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.getUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserDetails(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInviteDetailsDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserDetails(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.getUserDetails']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} registrationHash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserDetailsByRegistrationHash(registrationHash: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInviteDetailsDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserDetailsByRegistrationHash(registrationHash, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.getUserDetailsByRegistrationHash']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserInviteDTO} userInviteDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteUser(userInviteDTO: UserInviteDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetailsDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteUser(userInviteDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.inviteUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} userId 
         * @param {UserEditDTO} userEditDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(userId: number, userEditDTO: UserEditDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetailsDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(userId, userEditDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserControllerApi.updateUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options?: RawAxiosRequestConfig): AxiosPromise<UserDetailsDTO> {
            return localVarFp.getUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserControllerApiGetUserDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetails(requestParameters: UserControllerApiGetUserDetailsRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserInviteDetailsDTO> {
            return localVarFp.getUserDetails(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserControllerApiGetUserDetailsByRegistrationHashRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDetailsByRegistrationHash(requestParameters: UserControllerApiGetUserDetailsByRegistrationHashRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserInviteDetailsDTO> {
            return localVarFp.getUserDetailsByRegistrationHash(requestParameters.registrationHash, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserControllerApiInviteUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteUser(requestParameters: UserControllerApiInviteUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDetailsDTO> {
            return localVarFp.inviteUser(requestParameters.userInviteDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserControllerApiUpdateUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(requestParameters: UserControllerApiUpdateUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDetailsDTO> {
            return localVarFp.updateUser(requestParameters.userId, requestParameters.userEditDTO, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUserDetails operation in UserControllerApi.
 * @export
 * @interface UserControllerApiGetUserDetailsRequest
 */
export interface UserControllerApiGetUserDetailsRequest {
    /**
     * 
     * @type {number}
     * @memberof UserControllerApiGetUserDetails
     */
    readonly userId: number
}

/**
 * Request parameters for getUserDetailsByRegistrationHash operation in UserControllerApi.
 * @export
 * @interface UserControllerApiGetUserDetailsByRegistrationHashRequest
 */
export interface UserControllerApiGetUserDetailsByRegistrationHashRequest {
    /**
     * 
     * @type {string}
     * @memberof UserControllerApiGetUserDetailsByRegistrationHash
     */
    readonly registrationHash: string
}

/**
 * Request parameters for inviteUser operation in UserControllerApi.
 * @export
 * @interface UserControllerApiInviteUserRequest
 */
export interface UserControllerApiInviteUserRequest {
    /**
     * 
     * @type {UserInviteDTO}
     * @memberof UserControllerApiInviteUser
     */
    readonly userInviteDTO: UserInviteDTO
}

/**
 * Request parameters for updateUser operation in UserControllerApi.
 * @export
 * @interface UserControllerApiUpdateUserRequest
 */
export interface UserControllerApiUpdateUserRequest {
    /**
     * 
     * @type {number}
     * @memberof UserControllerApiUpdateUser
     */
    readonly userId: number

    /**
     * 
     * @type {UserEditDTO}
     * @memberof UserControllerApiUpdateUser
     */
    readonly userEditDTO: UserEditDTO
}

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUser(options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserControllerApiGetUserDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUserDetails(requestParameters: UserControllerApiGetUserDetailsRequest, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUserDetails(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserControllerApiGetUserDetailsByRegistrationHashRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public getUserDetailsByRegistrationHash(requestParameters: UserControllerApiGetUserDetailsByRegistrationHashRequest, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).getUserDetailsByRegistrationHash(requestParameters.registrationHash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserControllerApiInviteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public inviteUser(requestParameters: UserControllerApiInviteUserRequest, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).inviteUser(requestParameters.userInviteDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserControllerApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public updateUser(requestParameters: UserControllerApiUpdateUserRequest, options?: RawAxiosRequestConfig) {
        return UserControllerApiFp(this.configuration).updateUser(requestParameters.userId, requestParameters.userEditDTO, options).then((request) => request(this.axios, this.basePath));
    }
}

