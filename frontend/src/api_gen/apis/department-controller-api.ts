/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateDepartmentDTO } from '../models';
// @ts-ignore
import type { Department } from '../models';
// @ts-ignore
import type { DepartmentDTO } from '../models';
// @ts-ignore
import type { UserDetailsDTO } from '../models';
/**
 * DepartmentControllerApi - axios parameter creator
 * @export
 */
export const DepartmentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateDepartmentDTO} createDepartmentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepartment: async (createDepartmentDTO: CreateDepartmentDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDepartmentDTO' is not null or undefined
            assertParamExists('createDepartment', 'createDepartmentDTO', createDepartmentDTO)
            const localVarPath = `/api/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDepartmentDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepartment: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDepartment', 'id', id)
            const localVarPath = `/api/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} departmentId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployeeById: async (departmentId: number, id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentId' is not null or undefined
            assertParamExists('deleteEmployeeById', 'departmentId', departmentId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEmployeeById', 'id', id)
            const localVarPath = `/api/departments/employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (departmentId !== undefined) {
                localVarQueryParameter['departmentId'] = departmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDepartments: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartmentById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDepartmentById', 'id', id)
            const localVarPath = `/api/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeesByDepartmentId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEmployeesByDepartmentId', 'id', id)
            const localVarPath = `/api/departments/employees/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDepartment: async (id: number, name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDepartment', 'id', id)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateDepartment', 'name', name)
            const localVarPath = `/api/departments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentControllerApi - functional programming interface
 * @export
 */
export const DepartmentControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepartmentControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateDepartmentDTO} createDepartmentDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDepartment(createDepartmentDTO: CreateDepartmentDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDepartment(createDepartmentDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentControllerApi.createDepartment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDepartment(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDepartment(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentControllerApi.deleteDepartment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} departmentId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmployeeById(departmentId: number, id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmployeeById(departmentId, id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentControllerApi.deleteEmployeeById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDepartments(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DepartmentDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDepartments(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentControllerApi.getAllDepartments']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDepartmentById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDepartmentById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentControllerApi.getDepartmentById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmployeesByDepartmentId(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserDetailsDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmployeesByDepartmentId(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentControllerApi.getEmployeesByDepartmentId']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDepartment(id: number, name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Department>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDepartment(id, name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DepartmentControllerApi.updateDepartment']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DepartmentControllerApi - factory interface
 * @export
 */
export const DepartmentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepartmentControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {DepartmentControllerApiCreateDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDepartment(requestParameters: DepartmentControllerApiCreateDepartmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<Department> {
            return localVarFp.createDepartment(requestParameters.createDepartmentDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DepartmentControllerApiDeleteDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDepartment(requestParameters: DepartmentControllerApiDeleteDepartmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteDepartment(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DepartmentControllerApiDeleteEmployeeByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmployeeById(requestParameters: DepartmentControllerApiDeleteEmployeeByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteEmployeeById(requestParameters.departmentId, requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDepartments(options?: RawAxiosRequestConfig): AxiosPromise<Array<DepartmentDTO>> {
            return localVarFp.getAllDepartments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DepartmentControllerApiGetDepartmentByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDepartmentById(requestParameters: DepartmentControllerApiGetDepartmentByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Department> {
            return localVarFp.getDepartmentById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DepartmentControllerApiGetEmployeesByDepartmentIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmployeesByDepartmentId(requestParameters: DepartmentControllerApiGetEmployeesByDepartmentIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<UserDetailsDTO>> {
            return localVarFp.getEmployeesByDepartmentId(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DepartmentControllerApiUpdateDepartmentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDepartment(requestParameters: DepartmentControllerApiUpdateDepartmentRequest, options?: RawAxiosRequestConfig): AxiosPromise<Department> {
            return localVarFp.updateDepartment(requestParameters.id, requestParameters.name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDepartment operation in DepartmentControllerApi.
 * @export
 * @interface DepartmentControllerApiCreateDepartmentRequest
 */
export interface DepartmentControllerApiCreateDepartmentRequest {
    /**
     * 
     * @type {CreateDepartmentDTO}
     * @memberof DepartmentControllerApiCreateDepartment
     */
    readonly createDepartmentDTO: CreateDepartmentDTO
}

/**
 * Request parameters for deleteDepartment operation in DepartmentControllerApi.
 * @export
 * @interface DepartmentControllerApiDeleteDepartmentRequest
 */
export interface DepartmentControllerApiDeleteDepartmentRequest {
    /**
     * 
     * @type {number}
     * @memberof DepartmentControllerApiDeleteDepartment
     */
    readonly id: number
}

/**
 * Request parameters for deleteEmployeeById operation in DepartmentControllerApi.
 * @export
 * @interface DepartmentControllerApiDeleteEmployeeByIdRequest
 */
export interface DepartmentControllerApiDeleteEmployeeByIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DepartmentControllerApiDeleteEmployeeById
     */
    readonly departmentId: number

    /**
     * 
     * @type {number}
     * @memberof DepartmentControllerApiDeleteEmployeeById
     */
    readonly id: number
}

/**
 * Request parameters for getDepartmentById operation in DepartmentControllerApi.
 * @export
 * @interface DepartmentControllerApiGetDepartmentByIdRequest
 */
export interface DepartmentControllerApiGetDepartmentByIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DepartmentControllerApiGetDepartmentById
     */
    readonly id: number
}

/**
 * Request parameters for getEmployeesByDepartmentId operation in DepartmentControllerApi.
 * @export
 * @interface DepartmentControllerApiGetEmployeesByDepartmentIdRequest
 */
export interface DepartmentControllerApiGetEmployeesByDepartmentIdRequest {
    /**
     * 
     * @type {number}
     * @memberof DepartmentControllerApiGetEmployeesByDepartmentId
     */
    readonly id: number
}

/**
 * Request parameters for updateDepartment operation in DepartmentControllerApi.
 * @export
 * @interface DepartmentControllerApiUpdateDepartmentRequest
 */
export interface DepartmentControllerApiUpdateDepartmentRequest {
    /**
     * 
     * @type {number}
     * @memberof DepartmentControllerApiUpdateDepartment
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof DepartmentControllerApiUpdateDepartment
     */
    readonly name: string
}

/**
 * DepartmentControllerApi - object-oriented interface
 * @export
 * @class DepartmentControllerApi
 * @extends {BaseAPI}
 */
export class DepartmentControllerApi extends BaseAPI {
    /**
     * 
     * @param {DepartmentControllerApiCreateDepartmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentControllerApi
     */
    public createDepartment(requestParameters: DepartmentControllerApiCreateDepartmentRequest, options?: RawAxiosRequestConfig) {
        return DepartmentControllerApiFp(this.configuration).createDepartment(requestParameters.createDepartmentDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DepartmentControllerApiDeleteDepartmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentControllerApi
     */
    public deleteDepartment(requestParameters: DepartmentControllerApiDeleteDepartmentRequest, options?: RawAxiosRequestConfig) {
        return DepartmentControllerApiFp(this.configuration).deleteDepartment(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DepartmentControllerApiDeleteEmployeeByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentControllerApi
     */
    public deleteEmployeeById(requestParameters: DepartmentControllerApiDeleteEmployeeByIdRequest, options?: RawAxiosRequestConfig) {
        return DepartmentControllerApiFp(this.configuration).deleteEmployeeById(requestParameters.departmentId, requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentControllerApi
     */
    public getAllDepartments(options?: RawAxiosRequestConfig) {
        return DepartmentControllerApiFp(this.configuration).getAllDepartments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DepartmentControllerApiGetDepartmentByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentControllerApi
     */
    public getDepartmentById(requestParameters: DepartmentControllerApiGetDepartmentByIdRequest, options?: RawAxiosRequestConfig) {
        return DepartmentControllerApiFp(this.configuration).getDepartmentById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DepartmentControllerApiGetEmployeesByDepartmentIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentControllerApi
     */
    public getEmployeesByDepartmentId(requestParameters: DepartmentControllerApiGetEmployeesByDepartmentIdRequest, options?: RawAxiosRequestConfig) {
        return DepartmentControllerApiFp(this.configuration).getEmployeesByDepartmentId(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DepartmentControllerApiUpdateDepartmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentControllerApi
     */
    public updateDepartment(requestParameters: DepartmentControllerApiUpdateDepartmentRequest, options?: RawAxiosRequestConfig) {
        return DepartmentControllerApiFp(this.configuration).updateDepartment(requestParameters.id, requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }
}

